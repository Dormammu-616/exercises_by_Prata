Overloading standard operators: Create a class 'Time' that stores time information in the format 'hours' and 'minutes'. It is necessary to implement operator overloading to perform arithmetic operations: addition and subtraction of two instances of the class 'Time'.
Data type overload complexxx: Create a new data type "complexx" that contains two values ​​of type "double". You need to overload the operators to perform arithmetic operations: addition and subtraction of two instances of the class "complex".
Constructor overloading: Implement a "Cow" class that encapsulates a cow's fundamental attributes and supports object copying and assignment, along with displaying all characteristics on the screen.
Inheritance for compact disks: Implement a class hierarchy to describe compact discs. The base class should contain common attributes and methods for working with discs. Create a derived class that adds specific details for classical music. Ensure correct polymorphism and operator functionality.
Multiple and virtual inheritance: Implement a class hierarchy to describe a person, sniper, poker player, and troublemaker. The 'Person' class stores a name and surname, and includes a 'Show()' method to display this data. The 'Gunslinger' class inherits from 'Person', adding the time required to become combat-ready and the number of rifle notches, and overrides 'Show()'. The 'PokerPlayer' class also inherits from 'Person', returns a random card value, and uses 'Show()' from Person. The 'BadDude' class inherits from both 'Gunslinger' and 'PokerPlayer', adds methods for drawing a weapon and a card, and includes its own version of 'Show()'.
Palindromes: Create a program that prompts the user for a string and passes it to a boolean function. This function should return true if the string is a palindrome (reads the same in both directions) and false otherwise. The function should treat strings like "Otto" and "Madam, I'm Adam" as non-palindromes due to case sensitivity and punctuation.
Friend List for party: Write a program that allows Matt and Pat to input lists of their friends' names, stores them in separate containers, and displays them in sorted order. Then, create a third container that combines these lists, removes duplicates, and displays the result.